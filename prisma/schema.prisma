// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  users User[]
  products Product[]
  productCompanies ProductCompany[]
  dailySales DailySale[]
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  password String
  firstname String
  lastname String
  createdAt DateTime @default(now())
  tenantId Int
  tenant Tenant @relation(fields: [tenantId], references: [id])
  // auth_strategy String?
}

model Product {
  id Int @id @default(autoincrement())
  name String
  price Float
  stock Int? @default(0)
  barCode String?
  tenantId Int
  tenant Tenant @relation(fields: [tenantId], references: [id])
  companyId Int?
  company ProductCompany? @relation(fields: [companyId], references: [id])
  currencyId Int
  currency Currency @relation(fields: [currencyId], references: [id])
  purchasedItems PurchasedItem[]
}

model ProductCompany {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  products Product[]
  tenantId Int
  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model DailySale {
  id Int @id @default(autoincrement())
  saleDate DateTime @default(now())
  closed Boolean @default(false)
  tenantId Int
  tenant Tenant @relation(fields: [tenantId], references: [id])
  purchases Purchase[]
}

model Purchase {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  dailySaleId Int
  dailySale DailySale @relation(fields: [dailySaleId], references: [id])
  purchasedItems PurchasedItem[]
}

model PurchasedItem {
  id Int @id @default(autoincrement())
  quantity Int
  unitPrice Float
  purchaseId Int
  purchase Purchase @relation(fields: [purchaseId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  currencySnapshotId Int
  currencySnapshot DailyExchangeRate @relation(fields: [currencySnapshotId], references: [id])
}

model Currency {
  id Int @id @default(autoincrement())
  name String
  isoCode String?
  isoNum String?
  products Product[]
  dailyExchangeRates DailyExchangeRate[]
}

model DailyExchangeRate {
  id Int @id @default(autoincrement())
  currencyValueUsd Float
  timestamp DateTime // should be a timestamp
  currencySourceId Int
  currencySource Currency @relation(fields: [currencySourceId], references: [id])
  purchasedItems PurchasedItem[]
}
